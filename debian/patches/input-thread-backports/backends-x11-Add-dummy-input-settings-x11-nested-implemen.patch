From: =?utf-8?b?Ik1hcmNvIFRyZXZpc2FuIChUcmV2acOxbyki?= <mail@3v1n0.net>
Date: Wed, 10 Mar 2021 03:18:13 +0100
Subject: backends/x11: Add dummy input-settings-x11-nested implementation

The nested backend may need to have an input setting implementation,
while we don't want to change the host settings (re-using an X11 input
settings) we can add a dummy implementation, until something more
complex is needed.
---
 src/backends/x11/nested/meta-backend-x11-nested.c  |  32 ++-
 .../x11/nested/meta-input-settings-x11-nested.c    | 294 +++++++++++++++++++++
 .../x11/nested/meta-input-settings-x11-nested.h    |  34 +++
 src/meson.build                                    |   2 +
 4 files changed, 361 insertions(+), 1 deletion(-)
 create mode 100644 src/backends/x11/nested/meta-input-settings-x11-nested.c
 create mode 100644 src/backends/x11/nested/meta-input-settings-x11-nested.h

diff --git a/src/backends/x11/nested/meta-backend-x11-nested.c b/src/backends/x11/nested/meta-backend-x11-nested.c
index 425ddcb..97d04b3 100644
--- a/src/backends/x11/nested/meta-backend-x11-nested.c
+++ b/src/backends/x11/nested/meta-backend-x11-nested.c
@@ -25,6 +25,7 @@
 #include "backends/x11/nested/meta-backend-x11-nested.h"
 #include "backends/x11/nested/meta-cursor-renderer-x11-nested.h"
 #include "backends/x11/nested/meta-renderer-x11-nested.h"
+#include "backends/x11/nested/meta-input-settings-x11-nested.h"
 
 #include "wayland/meta-wayland.h"
 
@@ -32,6 +33,7 @@ typedef struct _MetaBackendX11NestedPrivate
 {
   MetaGpu *gpu;
   MetaCursorRenderer *cursor_renderer;
+  MetaInputSettings *input_settings;
 } MetaBackendX11NestedPrivate;
 
 static GInitableIface *initable_parent_iface;
@@ -86,7 +88,22 @@ meta_backend_x11_nested_get_cursor_renderer (MetaBackend        *backend,
 static MetaInputSettings *
 meta_backend_x11_nested_get_input_settings (MetaBackend *backend)
 {
-  return NULL;
+  MetaBackendX11Nested *backend_x11_nested = META_BACKEND_X11_NESTED (backend);
+  MetaBackendX11NestedPrivate *priv =
+    meta_backend_x11_nested_get_instance_private (backend_x11_nested);
+
+  if (!priv->input_settings)
+    {
+      ClutterSeat *seat;
+
+      seat = clutter_backend_get_default_seat (clutter_get_default_backend ());
+      priv->input_settings =
+        g_object_new (META_TYPE_INPUT_SETTINGS_X11_NESTED,
+                      "seat", seat,
+                      NULL);
+    }
+
+  return priv->input_settings;
 }
 
 static void
@@ -271,6 +288,18 @@ meta_backend_x11_nested_constructed (GObject *object)
   backend_x11_nested_class->init_gpus (backend_x11_nested);
 }
 
+static void
+meta_backend_x11_nested_dispose (GObject *object)
+{
+  MetaBackendX11Nested *backend_x11_nested = META_BACKEND_X11_NESTED (object);
+  MetaBackendX11NestedPrivate *priv =
+    meta_backend_x11_nested_get_instance_private (backend_x11_nested);
+
+  g_clear_object (&priv->input_settings);
+
+  G_OBJECT_CLASS (meta_backend_x11_nested_parent_class)->dispose (object);
+}
+
 static void
 meta_backend_x11_nested_init (MetaBackendX11Nested *backend_x11_nested)
 {
@@ -284,6 +313,7 @@ meta_backend_x11_nested_class_init (MetaBackendX11NestedClass *klass)
   MetaBackendX11Class *backend_x11_class = META_BACKEND_X11_CLASS (klass);
 
   object_class->constructed = meta_backend_x11_nested_constructed;
+  object_class->dispose = meta_backend_x11_nested_dispose;
 
   backend_class->post_init = meta_backend_x11_nested_post_init;
   backend_class->create_renderer = meta_backend_x11_nested_create_renderer;
diff --git a/src/backends/x11/nested/meta-input-settings-x11-nested.c b/src/backends/x11/nested/meta-input-settings-x11-nested.c
new file mode 100644
index 0000000..f3057c3
--- /dev/null
+++ b/src/backends/x11/nested/meta-input-settings-x11-nested.c
@@ -0,0 +1,294 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+
+/*
+ * Copyright 2021 Canonical, Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ *
+ * Author: Marco Trevisan <marco.trevisan@canonical.com>
+ */
+
+#include "backends/x11/nested/meta-input-settings-x11-nested.h"
+
+G_DEFINE_TYPE (MetaInputSettingsX11Nested,
+               meta_input_settings_x11_nested,
+               META_TYPE_INPUT_SETTINGS)
+
+static void
+meta_input_settings_x11_nested_set_send_events (MetaInputSettings        *settings,
+                                                ClutterInputDevice       *device,
+                                                GDesktopDeviceSendEvents  mode)
+{
+}
+
+static void
+meta_input_settings_x11_nested_set_matrix (MetaInputSettings  *settings,
+                                           ClutterInputDevice *device,
+                                           gfloat              matrix[6])
+{
+}
+
+static void
+meta_input_settings_x11_nested_set_speed (MetaInputSettings  *settings,
+                                          ClutterInputDevice *device,
+                                          gdouble             speed)
+{
+}
+
+static void
+meta_input_settings_x11_nested_set_left_handed (MetaInputSettings  *settings,
+                                                ClutterInputDevice *device,
+                                                gboolean            enabled)
+{
+}
+
+static void
+meta_input_settings_x11_nested_set_tap_enabled (MetaInputSettings  *settings,
+                                                ClutterInputDevice *device,
+                                                gboolean            enabled)
+{
+}
+
+static void
+meta_input_settings_x11_nested_set_tap_button_map (MetaInputSettings            *settings,
+                                                   ClutterInputDevice           *device,
+                                                   GDesktopTouchpadTapButtonMap  mode)
+{
+}
+
+static void
+meta_input_settings_x11_nested_set_tap_and_drag_enabled (MetaInputSettings  *settings,
+                                                         ClutterInputDevice *device,
+                                                         gboolean            enabled)
+{
+}
+
+static void
+meta_input_settings_x11_nested_set_tap_and_drag_lock_enabled (MetaInputSettings  *settings,
+                                                              ClutterInputDevice *device,
+                                                              gboolean            enabled)
+{
+}
+
+static void
+meta_input_settings_x11_nested_set_disable_while_typing (MetaInputSettings  *settings,
+                                                         ClutterInputDevice *device,
+                                                         gboolean            enabled)
+{
+}
+
+static void
+meta_input_settings_x11_nested_set_invert_scroll (MetaInputSettings  *settings,
+                                                  ClutterInputDevice *device,
+                                                  gboolean            inverted)
+{
+}
+
+static void
+meta_input_settings_x11_nested_set_edge_scroll (MetaInputSettings  *settings,
+                                                ClutterInputDevice *device,
+                                                gboolean            enabled)
+{
+}
+
+static void
+meta_input_settings_x11_nested_set_two_finger_scroll (MetaInputSettings  *settings,
+                                                      ClutterInputDevice *device,
+                                                      gboolean            enabled)
+{
+}
+
+static void
+meta_input_settings_x11_nested_set_scroll_button (MetaInputSettings  *settings,
+                                                  ClutterInputDevice *device,
+                                                  guint               button)
+{
+}
+
+
+static void
+meta_input_settings_x11_nested_set_click_method (MetaInputSettings           *settings,
+                                                 ClutterInputDevice          *device,
+                                                 GDesktopTouchpadClickMethod  mode)
+{
+}
+
+
+static void
+meta_input_settings_x11_nested_set_keyboard_repeat (MetaInputSettings *settings,
+                                                    gboolean           repeat,
+                                                    guint              delay,
+                                                    guint              interval)
+{
+}
+
+
+static void
+meta_input_settings_x11_nested_set_tablet_mapping (MetaInputSettings     *settings,
+                                                   ClutterInputDevice    *device,
+                                                   GDesktopTabletMapping  mapping)
+{
+}
+
+static void
+meta_input_settings_x11_nested_set_tablet_aspect_ratio (MetaInputSettings  *settings,
+                                                        ClutterInputDevice *device,
+                                                        double              ratio)
+{
+}
+
+static void
+meta_input_settings_x11_nested_set_tablet_area (MetaInputSettings  *settings,
+                                                ClutterInputDevice *device,
+                                                gdouble             padding_left,
+                                                gdouble             padding_right,
+                                                gdouble             padding_top,
+                                                gdouble             padding_bottom)
+{
+}
+
+
+static void
+meta_input_settings_x11_nested_set_mouse_accel_profile (MetaInputSettings           *settings,
+                                                        ClutterInputDevice          *device,
+                                                        GDesktopPointerAccelProfile  profile)
+{
+}
+
+static void
+meta_input_settings_x11_nested_set_trackball_accel_profile (MetaInputSettings           *settings,
+                                                            ClutterInputDevice          *device,
+                                                            GDesktopPointerAccelProfile  profile)
+{
+}
+
+
+static void
+meta_input_settings_x11_nested_set_stylus_pressure (MetaInputSettings      *settings,
+                                                    ClutterInputDevice     *device,
+                                                    ClutterInputDeviceTool *tool,
+                                                    const gint32            curve[4])
+{
+}
+
+static void
+meta_input_settings_x11_nested_set_stylus_button_map (MetaInputSettings          *settings,
+                                                      ClutterInputDevice         *device,
+                                                      ClutterInputDeviceTool     *tool,
+                                                      GDesktopStylusButtonAction  primary,
+                                                      GDesktopStylusButtonAction  secondary,
+                                                      GDesktopStylusButtonAction  tertiary)
+{
+}
+
+
+static void
+meta_input_settings_x11_nested_set_mouse_middle_click_emulation (MetaInputSettings  *settings,
+                                                                 ClutterInputDevice *device,
+                                                                 gboolean            enabled)
+{
+}
+
+static void
+meta_input_settings_x11_nested_set_touchpad_middle_click_emulation (MetaInputSettings  *settings,
+                                                                    ClutterInputDevice *device,
+                                                                    gboolean            enabled)
+{
+}
+
+static void
+meta_input_settings_x11_nested_set_trackball_middle_click_emulation (MetaInputSettings  *settings,
+                                                                     ClutterInputDevice *device,
+                                                                     gboolean            enabled)
+{
+}
+
+static gboolean
+meta_input_settings_x11_nested_has_two_finger_scroll (MetaInputSettings  *settings,
+                                                      ClutterInputDevice *device)
+{
+  return FALSE;
+}
+static gboolean
+meta_input_settings_x11_nested_is_trackball_device (MetaInputSettings  *settings,
+                                                    ClutterInputDevice *device)
+{
+  return FALSE;
+}
+
+static void
+meta_input_settings_x11_nested_init (MetaInputSettingsX11Nested *input_settings)
+{
+}
+
+static void
+meta_input_settings_x11_nested_class_init (MetaInputSettingsX11NestedClass *klass)
+{
+  MetaInputSettingsClass *settings_class = META_INPUT_SETTINGS_CLASS (klass);
+
+  settings_class->set_send_events =
+    meta_input_settings_x11_nested_set_send_events;
+  settings_class->set_matrix =
+    meta_input_settings_x11_nested_set_matrix;
+  settings_class->set_speed =
+    meta_input_settings_x11_nested_set_speed;
+  settings_class->set_left_handed =
+    meta_input_settings_x11_nested_set_left_handed;
+  settings_class->set_tap_enabled =
+    meta_input_settings_x11_nested_set_tap_enabled;
+  settings_class->set_tap_button_map =
+    meta_input_settings_x11_nested_set_tap_button_map;
+  settings_class->set_tap_and_drag_enabled =
+    meta_input_settings_x11_nested_set_tap_and_drag_enabled;
+  settings_class->set_tap_and_drag_lock_enabled =
+    meta_input_settings_x11_nested_set_tap_and_drag_lock_enabled;
+  settings_class->set_disable_while_typing =
+    meta_input_settings_x11_nested_set_disable_while_typing;
+  settings_class->set_invert_scroll =
+    meta_input_settings_x11_nested_set_invert_scroll;
+  settings_class->set_edge_scroll =
+    meta_input_settings_x11_nested_set_edge_scroll;
+  settings_class->set_two_finger_scroll =
+    meta_input_settings_x11_nested_set_two_finger_scroll;
+  settings_class->set_scroll_button =
+    meta_input_settings_x11_nested_set_scroll_button;
+  settings_class->set_click_method =
+    meta_input_settings_x11_nested_set_click_method;
+  settings_class->set_keyboard_repeat =
+    meta_input_settings_x11_nested_set_keyboard_repeat;
+  settings_class->set_tablet_mapping =
+    meta_input_settings_x11_nested_set_tablet_mapping;
+  settings_class->set_tablet_aspect_ratio =
+    meta_input_settings_x11_nested_set_tablet_aspect_ratio;
+  settings_class->set_tablet_area =
+    meta_input_settings_x11_nested_set_tablet_area;
+  settings_class->set_mouse_accel_profile =
+    meta_input_settings_x11_nested_set_mouse_accel_profile;
+  settings_class->set_trackball_accel_profile =
+    meta_input_settings_x11_nested_set_trackball_accel_profile;
+  settings_class->set_stylus_pressure =
+    meta_input_settings_x11_nested_set_stylus_pressure;
+  settings_class->set_stylus_button_map =
+    meta_input_settings_x11_nested_set_stylus_button_map;
+  settings_class->set_mouse_middle_click_emulation =
+    meta_input_settings_x11_nested_set_mouse_middle_click_emulation;
+  settings_class->set_touchpad_middle_click_emulation =
+    meta_input_settings_x11_nested_set_touchpad_middle_click_emulation;
+  settings_class->set_trackball_middle_click_emulation =
+    meta_input_settings_x11_nested_set_trackball_middle_click_emulation;
+  settings_class->has_two_finger_scroll =
+    meta_input_settings_x11_nested_has_two_finger_scroll;
+  settings_class->is_trackball_device =
+    meta_input_settings_x11_nested_is_trackball_device;
+}
diff --git a/src/backends/x11/nested/meta-input-settings-x11-nested.h b/src/backends/x11/nested/meta-input-settings-x11-nested.h
new file mode 100644
index 0000000..ace4be5
--- /dev/null
+++ b/src/backends/x11/nested/meta-input-settings-x11-nested.h
@@ -0,0 +1,34 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+
+/*
+ * Copyright 2021 Canonical, Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see <http://www.gnu.org/licenses/>.
+ *
+ * Author: Marco Trevisan <marco.trevisan@canonical.com>
+ */
+
+#pragma once
+
+#include "backends/meta-input-settings-private.h"
+
+#define META_TYPE_INPUT_SETTINGS_X11_NESTED (meta_input_settings_x11_nested_get_type ())
+
+G_DECLARE_DERIVABLE_TYPE (MetaInputSettingsX11Nested, meta_input_settings_x11_nested,
+                          META, INPUT_SETTINGS_X11_NESTED, MetaInputSettings);
+
+struct _MetaInputSettingsX11NestedClass
+{
+  MetaInputSettingsClass parent_class;
+};
diff --git a/src/meson.build b/src/meson.build
index b597e29..c1fc800 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -283,6 +283,8 @@ mutter_sources = [
   'backends/x11/nested/meta-backend-x11-nested.h',
   'backends/x11/nested/meta-cursor-renderer-x11-nested.c',
   'backends/x11/nested/meta-cursor-renderer-x11-nested.h',
+  'backends/x11/nested/meta-input-settings-x11-nested.c',
+  'backends/x11/nested/meta-input-settings-x11-nested.h',
   'backends/x11/nested/meta-stage-x11-nested.c',
   'backends/x11/nested/meta-stage-x11-nested.h',
   'backends/x11/nested/meta-renderer-x11-nested.c',
